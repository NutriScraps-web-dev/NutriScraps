{
	"info": {
		"_postman_id": "e4960c89-7dd8-4ab2-b418-344c853b4dfa",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "90e3af4c-fbfc-4acc-88cb-b803bf5c2095",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83ecae1c-9a8e-4a99-b36c-e4d394148531",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 8\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Ingredient 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6f854e83-78f3-4ba6-8ab9-b4e420a7c94a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ada773ba-312d-45d4-9c23-48c193a5fd12",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id2\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Flour\");\r",
							"    pm.expect(jsonData.quantity).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Flour\",\r\n    \"quantity\": 5\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all ingredients",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "18d5af0c-6794-4c7a-8a30-238cd4a5c20c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "577f8629-9b43-4ad7-a1fc-962f47c5973d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6c31a7a3-50c7-48b8-9e41-e6e93e3b864c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2c555beb-7476-455c-bc20-026a4639bb6f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1fa0f00-4676-4cd5-b29c-28c41694da92",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8fa8fab5-4a83-439c-b11a-97884a546142",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bad3328e-720f-4fce-909d-761410048437",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf04859b-97dc-465a-8236-fc3c5c557463",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ef597ca-6a68-4d9b-abc8-df690869e260",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f32444c7-8977-49d6-addb-225b0123626b",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 12\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Wheat (only quantity)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "455069d1-ec59-4138-b131-1ce619c65d43",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "071abf5e-f9aa-408c-94f6-853fb883a3c1",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 14\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Wheat name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a3ca410f-9a72-4508-8728-c8a5bb8b73d1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "67d03a8b-2fca-486b-a13f-5be6c108fe66",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Barley\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6e62d47-f7b1-456d-9aea-b6bbe5feff69",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1a4ca4ed-50b9-48e8-b7e7-dd884f4c42e5",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(15);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": \"15\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity and name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "49811913-6513-42d9-901c-1bb08161ca77",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "09053075-cda7-418f-b2b9-e670de7cfe2e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Lettuce\");\r",
							"    pm.expect(jsonData.quantity).to.eql(30);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Lettuce\",\r\n    \"quantity\": \"30\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fb6d906f-cbe6-4992-9321-4f8edad49210",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b611890c-4565-47b4-8c83-00a77d8b8ca0",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2870dfe0-54f1-4970-a2c0-9b0862d611ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b555bfe8-2040-4645-9021-a7a99398e018",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "382a2054-09ba-45c4-a062-06489da1ad41",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b30061d-57d0-4a73-a0ff-287fa2f322e1",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "448a2e73-4a98-4994-a86f-f111add0d596",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "331d2a7f-6384-4155-a712-560020da46dc",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2903bc9b-e396-49a3-bece-af62d946f7af",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3512442d-c49b-47bb-be9d-9290c72b91bd",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"rice_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 250\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Egg",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d88a15f2-80a4-4126-a402-1980a090b141",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "df01ef88-97d0-413c-bd0f-1577f60ec21a",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"eggs_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Eggs\");\r",
							"    pm.expect(jsonData.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eggs\",\r\n    \"quantity\": 2\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "acf3c05e-012a-48fd-beb2-23c9cb5c3916",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5e11709b-ae87-45b0-9038-abfa0d5707c4",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId = jsonData._id;\r",
							"pm.environment.set(\"recipe_id\", recipeId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5ed4ddb-6146-4c50-b5a6-dac7edc60fa6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7dcc43e2-0176-4c5f-8817-ae01a6e488cc",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId2 = jsonData._id;\r",
							"pm.environment.set(\"recipe_id2\", recipeId2);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alternate Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and add freshly cracked eggs in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alternate Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\"],\r\n    \"cookingProcess\":[\"stir the rice and add freshly cracked eggs in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all recipes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87a1cab7-c7e5-4196-9adf-0d73f5f41287",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "489a0775-6f2f-40f2-8f62-ca83ee1c3f1c",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe Fried Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ec75a203-4897-4e40-83a4-718b70147aa6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eb3b7d8f-a10b-45c1-9244-64df3cbaf91a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b3f0d58-afdc-4bce-b066-1cadf58ee450",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4ccd8ece-abb8-4dc4-9583-4a4da529f79b",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f40e9978-86a2-4b74-be65-a7fa2bbb0df0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0188da7e-e7fb-4b27-9c77-9d9716cf626a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9bd555f3-638a-4578-84eb-244fdf473d99",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "09a2a57d-6439-4f1a-a2bf-74bc47292596",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\",  \"let it cool for 5 minutes\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"let it cool for 5 minutes\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd1379f9-5df9-4862-9a67-381cc9a987cf",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7e26d0b6-e5c3-4c6e-a1d2-7bcb1483057f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice Supreme\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice Supreme\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8ccc42a-5cb6-4dc6-93ea-bfd5d0d89af0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "78908ab0-22e2-4d56-b228-7567a8684135",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a357dc77-fe03-44e3-972c-dbf7b4b2f081",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "63601642-d352-4781-994c-c17594960377",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "64624f39-a2a7-41f4-adc8-78482f70d414",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7d7001ec-a792-46f9-b3d6-f0d64fb94ffa",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08e29b99-40a8-4ed9-90ee-4c95d0b3738c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "089d111a-fd6b-4440-85bd-9cffe110a959",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		
    {
      "name": "GET /api",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "b58d92ec-5214-450c-adb0-28e068aa71b9",
            "exec": [""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api",
          "host": ["{{host}}"],
          "path": ["api"]
        }
      },
      "response": []
    },
    {
      "name": "post - createRole - admin - admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "092943d1-199e-4e1a-b04c-55078eda0b51",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "17576158-114b-4d07-9539-610ebb9aff71",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin creates new role\", ()=>{\r",
              "    pm.response.to.have.status(201)\r",
              "})\r",
              "\r",
              "pm.environment.set(\"roleType\", jsonData.role);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"role\" : \"admin\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/roles",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles"]
        }
      },
      "response": []
    },
    {
      "name": "post - createRole - admin - user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "f6f6200e-96ea-4b60-aac9-9525edc89dd5",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b09f68de-46be-41df-bce8-c6515db8f796",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin creates new role\", ()=>{\r",
              "    pm.response.to.have.status(201)\r",
              "})\r",
              "\r",
              "pm.environment.set(\"roleType\", jsonData.role);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "type": "text",
            "value": "Bearer {{tokenAdmin}}",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"role\" : \"user\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/roles",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "a8c7e474-2eae-4acd-a882-3f4df32b7f1f",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "16521355-fcd9-490e-ab7e-7f338ebd207b",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "\r",
              "pm.test(\"sign up as a user - status check\", function(){\r",
              "    pm.response.to.have.status(201);\r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - json check\", function(){\r",
              "    pm.expect(jsonData.username).to.eql(\"idrees\");\r",
              "    pm.expect(jsonData.email).to.eql('test@test.com');\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"idrees\",\r\n        \"lastName\": \"samadi\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"afg\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"admin\"\r\n    \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "5bfe15ac-dc8a-4521-9fb6-835fee3ad5d1",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "7cc180f4-7657-4eb1-8d29-89bb3294694f",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "pm.environment.set(\"usernameUser\", jsonData.username);\r",
              "pm.environment.set(\"passwordUser\", \"password\");\r",
              "pm.environment.set(\"idUser\", jsonData._id);\r",
              "pm.environment.set(\"emailUser\", jsonData.email);\r",
              "//console.log(pm.environment.get(\"username\"))\r",
              "\r",
              "pm.test(\"sign up as a user - status check\", function(){\r",
              "    pm.response.to.have.status(201);\r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - json check\", function(){\r",
              "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser\"));\r",
              "    pm.expect(jsonData.email).to.eql(pm.environment.get(\"emailUser\"));\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"tom\",\r\n        \"lastName\": \"jack\"\r\n    },\r\n    \"username\": \"jacks11\",\r\n    \"email\": \"jack@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - user - error",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "0cec2d48-8c7a-4d66-bfbf-0b9872c8eabb",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "8edec23a-a6d2-4310-b3f2-fcb9ba0bc969",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "\r",
              "pm.test(\"sign up as a user - existing Username - status check\", function(){\r",
              "    pm.response.to.have.status(403);\r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - existing Username - json check\", function(){\r",
              "    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Username Already Exist\"));\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Germany\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - user - error",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "dea2d025-35f1-46f8-a34b-32e1513c2840",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "1c71ea7c-3721-4211-ae51-2e7dea8438e5",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "\r",
              "pm.test(\"sign up as a user - email exist - status check\", function(){\r",
              "    pm.response.to.have.status(403);\r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - email exist - json check\", function(){\r",
              "    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Email Already Exist\"));\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - user - error",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "0427b4d6-2309-4573-9952-b4442d5249fb",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b017f191-5287-4932-9910-0eded26e616c",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "\r",
              "pm.test(\"sign up as a user - invalid data - status check\", function(){\r",
              "    pm.response.to.have.status(422);\r",
              "    \r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - invalid data - json check\", function(){\r",
              "    pm.expect(jsonData.message).to.eql(\"invalid data\");\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"idrees@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "post - postLogin - user - error",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ca67ac1f-712f-41e9-a755-532034c73d5f",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user log in\", ()=>{\r",
              "    pm.response.to.have.status(401)\r",
              "})\r",
              "\r",
              "pm.test(\"log in as a user - Wrong Username - json check\", function(){\r",
              "    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"someName\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/login",

          "host": ["{{host}}"],

          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "post - postLogin - user - error",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "628da1da-95b5-49e2-b9c6-f12d844a419c",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user log in\", ()=>{\r",
              "    pm.response.to.have.status(401)\r",
              "})\r",
              "console.log(jsonData)\r",
              "pm.test(\"log in as a user - Wrong Password - json check\", function(){\r",
              "    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"wrongPass\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/login",

          "host": ["{{host}}"],

          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "post - postLogin - user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "e49fe331-6eab-41b6-9c32-737b94c6d7d0",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user log in\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              "pm.environment.set(\"tokenUser\", jsonData.token);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"{{usernameUser}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/login",

          "host": ["{{host}}"],

          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "get - getInfo - user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "dcf70b64-6352-400f-b871-57ae92f9056f",
            "exec": [
              "pm.test(\"getting a single user info by ID - getInfo\", ()=>{\r",
              "    pm.response.to.have.status(202);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenUser}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}"]
        }
      },
      "response": []
    },
    {
      "name": "patch - updateProfile - user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "8e7636ac-677c-45fd-aac1-b5f79a4efbe2",
            "exec": [
              "pm.environment.set(\"updatedBio\", \"I Like cooking Indian foods\")"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "9ef2341b-63ee-4847-939a-bcc71099038e",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user updates profile - updateProfile\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              "console.log(jsonData);\r",
              "pm.test(\"user updates profile - updateProfile\", ()=>{\r",
              "    pm.expect(jsonData.result.bio).to.equal(pm.environment.get(\"updatedBio\"))\r",
              "    pm.expect(jsonData.result.name.firstName).to.equal(\"someOne\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenUser}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"someOne\"\r\n    },\r\n    \"bio\": \"{{updatedBio}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}"]
        }
      },
      "response": []
    },
    {
      "name": "patch - changePassword - user",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "f69aa086-54fd-4773-8e00-12f814db9153",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "f09d336e-d703-4a05-b177-0e6a3c0b359d",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user update Password\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "pm.test(\"user updates Password\", ()=>{\r",
              "    pm.expect(jsonData.message).to.equal(\"Password changed\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "type": "text",
            "value": "Bearer {{tokenUser}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}/password",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}", "password"]
        }
      },
      "response": []
    },
    {
      "name": "patch - changePassword - user - error",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1ffd6efd-bf5a-4999-80fc-7c6e2029a808",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "14e011d8-e742-4ba6-b50c-a8828e919545",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user updates profile - updateProfile\", ()=>{\r",
              "    pm.response.to.have.status(401)\r",
              "})\r",
              "pm.test(\"user updates profile - updateProfile\", ()=>{\r",
              "    pm.expect(jsonData.message).to.equal(\"Please Enter Correct Password\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "type": "text",
            "value": "Bearer {{tokenUser}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"oldPassword\": \"wrongPass\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}/password",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}", "password"]
        }
      },
      "response": []
    },
    {
      "name": "patch - changePassword - user error",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "719bfdb6-f3ec-4338-b253-bb0ce1bd1566",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "a0a95821-10be-4103-9976-7a0f0a79737e",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user updates Password\", ()=>{\r",
              "    pm.response.to.have.status(422)\r",
              "})\r",
              "pm.test(\"user updates Password\", ()=>{\r",
              "    pm.expect(jsonData.message).to.equal(\"Password Too Short, Must be at Least 8 characters Long\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "type": "text",
            "value": "Bearer {{tokenUser}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newP\",\r\n    \"confirmNewPassword\": \"newP\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}/password",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}", "password"]
        }
      },
      "response": []
    },
    {
      "name": "delete - deleteProfile - user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "14118697-e54e-4d38-81bc-0139f8ac2bdc",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user deletes profile\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              "pm.test(\"user updates profile - updateProfile\", ()=>{\r",
              "    pm.expect(jsonData.message).to.equal(\"The User is Deleted\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenUser}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/user/{{idUser}}",

          "host": ["{{host}}"],

          "path": ["api", "user", "{{idUser}}"]
        }
      },
      "response": []
    },
    {
      "name": "post - postLogin - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "f815c5d0-fb65-4d42-8216-8b0f42215802",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"user log in\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              "pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
              "pm.environment.set(\"idAdmin\", jsonData.userId);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"password\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/login",

          "host": ["{{host}}"],

          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "post - createRole - admin ",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1b82049a-29e4-4b2a-8171-7f7f72afb0a2",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "cba7fcfd-48b3-4b0b-92cc-399588b156fc",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin creates new role\", ()=>{\r",
              "    pm.response.to.have.status(201)\r",
              "})\r",
              "\r",
              "pm.environment.set(\"roleType\", jsonData.role);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"role\" : \"zzzzzzzz\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/roles",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles"]
        }
      },
      "response": []
    },
    {
      "name": "get - getAllRoles - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ed1f69f8-cc94-4eaa-91bf-815f61f33011",
            "exec": [
              "pm.test(\"admin fetch all roles\", ()=>{\r",
              "    pm.response.to.have.status(202)\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/roles",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles"]
        }
      },
      "response": []
    },
    {
      "name": "get - getAllRoles - admin - sort",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "38bbe838-b46d-4ce6-9ebe-aadca84e88eb",
            "exec": [
              "pm.test(\"admin fetch all roles\", ()=>{\r",
              "    pm.response.to.have.status(202)\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "type": "text",
            "value": "Bearer {{tokenAdmin}}"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/roles?sort=-role",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles"],
          "query": [
            {
              "key": "sort",
              "value": "-role"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "get - getRole - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "666d5bda-8a13-476c-93d5-29879206360a",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin fetch a role by type - status check\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              "pm.test(\"admin fetch a role by type - json Check\", ()=>{\r",
              "    pm.expect(jsonData.role).to.eql(pm.environment.get(\"roleType\"))\r",
              "})\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/roles/{{roleType}}",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles", "{{roleType}}"],
          "query": [
            {
              "key": "",
              "value": null,
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "patch - editRole - admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "e968a09e-73d5-4f95-885b-96946b015db1",
            "exec": ["const newRoleType = \"newRoleType\""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "7ee25678-9a8f-41e5-9856-b71285c6f99f",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "pm.environment.set(\"roleType\", jsonData.updatedRole.role)\r",
              "\r",
              "pm.test(\"admin edits a role by type - status check\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"role\": \"{{newRoleType}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/roles/{{roleType}}",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles", "{{roleType}}"]
        }
      },
      "response": []
    },
    {
      "name": "delete - deleteRole - admin - error",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "fa26ad65-3162-40b6-bab8-5d69741348b2",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin deletes a role by type\", ()=>{\r",
              "    pm.response.to.have.status(404)\r",
              "})\r",
              "\r",
              "pm.test(\"admin deletes a role by type - json check\", ()=>{\r",
              "    pm.expect(jsonData.message).to.eql(\"The role does NOT Exist\")\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/roles/hgkjhgjgkj",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles", "hgkjhgjgkj"]
        }
      },
      "response": []
    },
    {
      "name": "delete - deleteRole - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a3725956-c843-4593-937d-0fd90fb3611f",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin deletes a role by type\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/roles/{{newRoleType}}",

          "host": ["{{host}}"],

          "path": ["api", "admins", "roles", "{{newRoleType}}"]
        }
      },
      "response": []
    },
    {
      "name": "get - getAllUsers - admin - pagenation",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "eeb62d8d-6560-448b-931d-d2a1b6d430e4",
            "exec": [
              "let perPage = Math.floor(Math.random() * Math.floor(10));\r",
              "\r",
              "pm.environment.set(\"perPage\", perPage);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2d92c4b2-7ea6-41d8-b8bf-fe64554740c3",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin Fetches all users - status\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/allusers?page=1&limit=5",

          "host": ["{{host}}"],

          "path": ["api", "admins", "allusers"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "get - getAllUsers - admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ef22536b-18e9-4e4e-83de-b21109fac9b4",
            "exec": [
              "let perPage = Math.floor(Math.random() * Math.floor(6));\r",
              "\r",
              "pm.environment.set(\"perPage\", perPage);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "a06aeb40-cc80-4c0e-83f6-10284e0ccdca",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin Fetches all users - status\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{host}}/api/admins/allusers",

          "host": ["{{host}}"],

          "path": ["api", "admins", "allusers"]
        }
      },
      "response": []
    },
    {
      "name": "post - postSignup - user 2",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "19520d76-6181-4d11-a85e-ac3ceb66d1c4",
            "exec": [""],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "313ef0b4-8ae9-4acb-8739-4ae99faed5cd",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.environment.set(\"usernameUser2\", jsonData.username);\r",
              "pm.environment.set(\"passwordUser2\", \"password\");\r",
              "pm.environment.set(\"idUser2\", jsonData._id);\r",
              "\r",
              "pm.test(\"sign up as a user - status check\", function(){\r",
              "    pm.response.to.have.status(201);\r",
              "})\r",
              "\r",
              "pm.test(\"sign up as a user - json check\", function(){\r",
              "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser2\"));\r",
              "})\r",
              "\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{    \"bio\": \"some random Text\",\r\n    \"name\": {\r\n        \"firstName\": \"jerry\",\r\n        \"lastName\": \"mouse\"\r\n    },\r\n    \"username\": \"theJerry\",\r\n    \"email\": \"jerry@mouse.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/users/signup",

          "host": ["{{host}}"],

          "path": ["api", "users", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "patch - editUser - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "e4742219-9c92-4ec1-8b15-106dbaa12c27",
            "exec": [
              "const jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"admin edits user - status check\", function(){\r",
              "    pm.response.to.have.status(200);\r",
              "})\r",
              "\r",
              "pm.test(\"admin edits user - json check\", function(){\r",
              "    pm.expect(jsonData.updatedUser.name.firstName).to.eql(\"jack\");\r",
              "   pm.expect(jsonData.updatedUser.name.lastName).to.eql(\"Bower\");\r",
              "    pm.expect(jsonData.updatedUser.country).to.equals(\"USA\");\r",
              "})\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"jack\",\r\n        \"lastName\": \"Bower\"\r\n    },\r\n    \"country\": \"USA\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/allusers/{{idUser2}}",

          "host": ["{{host}}"],

          "path": ["api", "admins", "allusers", "{{idUser2}}"],
          "query": [
            {
              "key": "",
              "value": null,
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "delete - deleteUser - admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "e8055e9b-3398-4c24-a283-cebddc2573b5",
            "exec": [
              "pm.test(\"admin deletes a user\", ()=>{\r",
              "    pm.response.to.have.status(200)\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "bearer {{tokenAdmin}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{host}}/api/admins/allusers/{{idUser2}}",

          "host": ["{{host}}"],

          "path": ["api", "admins", "allusers", "{{idUser2}}"]
        }
      },
      "response": []
    }
  
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ee39ef98-7e40-4c9a-9727-c10b3f2d609a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4eb81008-6f74-41fe-95c4-ee5e2a651ace",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}

