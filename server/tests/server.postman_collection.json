{
	"info": {
		"_postman_id": "ca24055b-049a-4fc6-89bb-3446a3a39ec4",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "681f8365-dcc7-4e9c-bd1b-a07f019f7e28",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3bcc840e-ae4d-46a6-9f07-5248d208a431",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 8\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Ingredient 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d953d7bb-c0a2-4441-993e-a7020c5a7595",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "27a9b772-7dac-418b-9757-a178f12c68a6",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id2\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Flour\");\r",
							"    pm.expect(jsonData.quantity).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Flour\",\r\n    \"quantity\": 5\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all ingredients",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b1f0b8c9-aaff-4ff3-b9ab-3252a0dcac3b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c9c552ad-d89d-4a85-805c-e0a13b3ef7bf",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "abd19efb-8079-4b07-9995-af017b6ad826",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f827f746-74f9-4dd2-b6d1-999a05a4dd70",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bcf00ac9-3158-47cc-911d-576a18eb48fc",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2041b859-363e-4f8e-b527-53da0f223913",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "18acdba2-196b-48ca-b8a8-837cc70aff40",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c733ed35-dbdb-45e3-93d7-53a2f16dd03e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f83c031d-d9ac-4de5-bbcc-29f047a7f973",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77e43a1b-57f5-4cd5-9865-9ec306f9230e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 12\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Wheat (only quantity)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fa3c7673-3c36-4659-8551-40df6dd15ef0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aac18705-8378-43d0-a08a-97a778e44785",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 14\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Wheat name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "64fbced9-ec68-444c-ad7c-322380be2497",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c3e5fca-9474-4f36-91aa-b7f6218a88f3",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Barley\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29a54c87-64b7-48d4-9bd0-0981fc424c56",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d5113708-8131-4413-b625-75a31a70f3f5",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(15);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": \"15\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity and name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bfb7e69b-5386-44a7-aa9f-0897d543c57c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d4e44c1d-5576-4ecc-bedb-291391ae0f05",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Lettuce\");\r",
							"    pm.expect(jsonData.quantity).to.eql(30);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Lettuce\",\r\n    \"quantity\": \"30\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "049515c8-8e18-49a4-8060-bf98f2cc8945",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46705a27-9bbf-4c8d-b147-e2b96631d068",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e8e762f0-72f4-407a-8e37-3f5597b7ad35",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e08273ca-5bde-4c64-8592-ca4e9520a334",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "366a6e39-f783-4c3d-9188-1e9a7e0d91de",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5950c03e-df09-4dab-87ec-7aea4113c4df",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "84cbe6a9-d654-432a-bacb-d13b6ec475ae",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3763e13-0893-4347-801b-ff7233d2fe47",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "252ccf0b-e8a3-4198-bcb1-b419c26e9f30",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "04b2b28c-4154-4b93-bc12-0ae4ff4c87d3",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"rice_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 250\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Egg",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "27dec967-6304-49f6-bc32-ba27281bd4f4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "149cfb80-2f97-409b-9c01-1690b4814c42",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"eggs_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Eggs\");\r",
							"    pm.expect(jsonData.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eggs\",\r\n    \"quantity\": 2\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8ba3f651-6199-4e4c-a2b4-563030df36b7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - Super  admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08644a79-ae7b-45ea-9984-36a74c2cefa1",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"super-admin\",\r\n    \"password\": \"superAdmin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole  - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b486d832-a00a-44e2-871b-8a16c040d046",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b395dee4-b879-4519-9d7e-392d5cf22546",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"admin01\",\r\n    \"description\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1f16cb96-b42d-4485-bb67-6c4c193e76d6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0e87a35b-1726-493f-a552-85ab1b2a0f44",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"user\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8146f819-a9dc-4bba-a6a8-93b0d4936a06",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "daa12b76-0068-4f12-b767-2c2f949e8369",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(\"idrees\");\r",
							"    pm.expect(jsonData.email).to.eql('test@test.com');\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"idrees\",\r\n        \"lastName\": \"samadi\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"afg\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"admin\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "26c720ae-94cc-4a1d-a881-5be355a7be38",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64906514-3b03-4554-b68d-6241e03267e0",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"usernameUser\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser\", \"password\");\r",
							"pm.environment.set(\"idUser\", jsonData._id);\r",
							"pm.environment.set(\"emailUser\", jsonData.email);\r",
							"//console.log(pm.environment.get(\"username\"))\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"emailUser\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"tom\",\r\n        \"lastName\": \"jack\"\r\n    },\r\n    \"username\": \"jacks11\",\r\n    \"email\": \"jack@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e40ce4a9-547e-40a8-8385-d0e0d2f78783",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aadb7b31-7134-4e82-ad70-0c5c205e1b8c",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Username Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Germany\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25b37d03-32df-4708-9754-4c75bcddef40",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "18206c76-ce19-480a-a8a4-904341c7856e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Email Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "36b85ccf-ab9f-4a78-8abe-fc4e3d545754",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84c57831-33e7-4bd5-8da6-a9c27b57d387",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - status check\", function(){\r",
							"    pm.response.to.have.status(422);\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"invalid data\");\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"idrees@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1f80a9f-2947-4d59-ad3b-cf334aee92ac",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"\r",
							"pm.test(\"log in as a user - Wrong Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"someName\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55e6269c-feff-490e-a2e1-d69a40ffcb90",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"console.log(jsonData)\r",
							"pm.test(\"log in as a user - Wrong Password - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"wrongPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6944297f-80fd-404b-bfae-6a64a47f37f6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenUser\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{usernameUser}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getInfo - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee0300ef-6739-4780-ae75-b51bf5a25308",
						"exec": [
							"pm.test(\"getting a single user info by ID - getInfo\", ()=>{\r",
							"    pm.response.to.have.status(202);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - updateProfile - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "adc9ec3c-8517-4471-8231-d6a4c593b0be",
						"exec": [
							"pm.environment.set(\"updatedBio\", \"I Like cooking Indian foods\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "578c1985-a1f2-4045-ae57-17db418c400f",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"console.log(jsonData);\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.result.bio).to.equal(pm.environment.get(\"updatedBio\"))\r",
							"    pm.expect(jsonData.result.name.firstName).to.equal(\"someOne\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"someOne\"\r\n    },\r\n    \"bio\": \"{{updatedBio}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5aebc6b-5043-424c-8629-73bcb2db6105",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c8f9314f-d022-4c63-9f37-3884f129611d",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user update Password\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password changed\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "38dfd282-4f74-418d-a975-5e7248bb1140",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "278b1e70-2d51-4e05-8335-432a248015ff",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.response.to.have.status(422)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password Too Short, Must be at Least 8 characters Long\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newP\",\r\n    \"confirmNewPassword\": \"newP\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteProfile - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1addcb05-2bb6-4378-9563-29ea8bb7181b",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user deletes profile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"The User is Deleted\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8eca535e-2a82-4004-a58a-3f4ddc112b7b",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "isAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90d2aae7-fef7-4041-8f57-8b4c5338c20c",
						"exec": [
							"pm.test(\"isAdmin\", ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/auth/{{idAdmin}}/role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"{{idAdmin}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba1d007c-137a-4a80-bf58-5100e630b5da",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d37d357e-792f-4df0-89c7-4ebeb8da9bd6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleId\", jsonData._id);\r",
							"pm.environment.set(\"roleId01\", jsonData._id);\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"zzzzzzzz\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90dddbf3-a89e-48e4-ba0b-7811e1294cb2",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin - sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dacee6f-a442-426e-8f26-def6312ebf51",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles?sort=-role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					],
					"query": [
						{
							"key": "sort",
							"value": "-role"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47e25bd2-8d68-437b-94a1-4c9e9b18a77e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin fetch a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"admin fetch a role by type - json Check\", ()=>{\r",
							"    pm.expect(jsonData.role).to.eql(pm.environment.get(\"roleType\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId01}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId01}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editRole - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8da623bf-7fe6-4f2e-b61a-b36174d27d64",
						"exec": [
							"const newRoleType = \"newRoleType\""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "53920d43-ca1a-4d5a-af93-1d8d2abe1d33",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"roleType\", jsonData.updatedRole.role)\r",
							"\r",
							"pm.test(\"admin edits a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"{{newRoleType}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b218005c-b19e-4c28-a78a-242bd166b8b3",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"pm.test(\"admin deletes a role by type - json check\", ()=>{\r",
							"    pm.expect(jsonData.message).to.eql(\"The role does NOT Exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/5f806c1af5500119381de31c",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"5f806c1af5500119381de31c"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86c770a4-84d0-472a-beb5-c899674b47c5",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin - pagenation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a87e45bc-5429-48cc-9672-08673b6c5be3",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(10));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "86adba58-5ca2-4513-b82d-abc41802c8b6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users?page=1&limit=5",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d52e181-82ff-4638-9bff-331dec4b1911",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(6));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "044bd595-9d7b-41b4-947c-645c1eb2209d",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9bd7cd91-fdc1-45ec-80b1-674344ac47a0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "03c4484f-8a67-4587-9d1c-cd82983d2bf7",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"usernameUser2\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser2\", \"password\");\r",
							"pm.environment.set(\"idUser2\", jsonData._id);\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser2\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random Text\",\r\n    \"name\": {\r\n        \"firstName\": \"jerry\",\r\n        \"lastName\": \"mouse\"\r\n    },\r\n    \"username\": \"theJerry\",\r\n    \"email\": \"jerry@mouse.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "978f3cf1-1c29-4710-a973-2eb9fa108d4e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin edits user - status check\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"admin edits user - json check\", function(){\r",
							"    pm.expect(jsonData.updatedUser.roleType).to.eql(\"admin01\");\r",
							"   pm.expect(jsonData.updatedUser.bio).to.eql(\"some random text\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roleType\": \"admin01\",\r\n    \"bio\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3139f61-4fd8-4cf7-a1a1-50a2a78dfd7f",
						"exec": [
							"pm.test(\"admin deletes a user\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4dd0af7c-070f-4de9-8b5c-88a19cec234a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "639223a7-ae3d-460f-afea-36c04454d61f",
						"exec": [
							"pm.test(\"get Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllcomments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3565cb10-4a7a-42d4-86c9-5523ed8173a1",
						"exec": [
							"pm.test(\"get All comments\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16abee76-8285-4e5c-8179-79c058336851",
						"exec": [
							"pm.test(\"delete Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6cfd4407-99e1-47d0-bb9e-e7d0d92889cd",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "addSubComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4899f71-2860-4bee-8cfd-a24bd8f14ead",
						"exec": [
							"pm.test(\"add Sub Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Idrees et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "56e635d1-0eb5-4cc7-9546-8b0802375de2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eed2b890-3dbb-4040-8493-4386ca3ad475",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId = jsonData._id;\r",
							"pm.environment.set(\"recipe_id\", recipeId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\",\r\n    \"ingredients\": [{\r\n        \"name\": \"Rice\",\r\n        \"quantity\": 500,\r\n        \"unit\": \"grams\"\r\n    }]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "121dc0a9-d29e-48d8-9296-6e6fcc137b11",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c3b12268-ec83-4127-ab80-3bac1ebad239",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId2 = jsonData._id;\r",
							"pm.environment.set(\"recipe_id2\", recipeId2);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alternate Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and add freshly cracked eggs in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alternate Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\"],\r\n    \"cookingProcess\":[\"stir the rice and add freshly cracked eggs in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\"    \r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all recipes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d2e84e46-866c-4cfc-b2fd-ff2d9a413a91",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "41a371fd-4319-441d-8586-00f55197757f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe Fried Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "959ddca9-a043-4aad-b716-ba685d0b9ebd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a0ece210-df91-4f73-a481-e7c7b0056b5f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8ee3391a-ffc6-4dde-9fba-52ff06c641d1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5df78922-00bf-4ad6-9912-59031ed4275d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f505c751-7ef8-49eb-82fd-3c6aa3391f58",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8ba9fdd7-54db-4814-be75-87304683f9c3",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c83dc98-e62b-466e-997a-3e1227144a5c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95d6aeaf-e7ff-4a84-9b97-48bd96d5ce4c",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\",  \"let it cool for 5 minutes\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"imgur.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"let it cool for 5 minutes\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"imgur.com\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "06c37140-2d9f-4afd-90ba-965538286da1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b74d202b-4236-4675-b638-f34cd593ca7f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice Supreme\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice Supreme\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Vegetarian\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2db509c9-dfbe-4def-862d-1651f28fc641",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fff529ee-b0df-496e-bbeb-c54fab8557ba",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6723409-8d27-432e-9937-31e25dbbe94a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "938f19ca-60f2-4d22-b04f-64dc93a6981a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ec0cb40-e5ff-4f72-8648-a3e0de97f30f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee91d0ae-ed2e-4931-a170-0caeb7916e14",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ac9a9884-00e9-441c-aea2-fcbd2fda1ffa",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5e9f7e97-8dea-4185-a7c5-4aca48a3a8e8",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a11b5caf-7003-47ee-81ef-e3cec20da66f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8c183c6b-e303-4764-a046-3c96cc64b001",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "{{host}}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}