{
	"info": {
		"_postman_id": "7ea13bc9-5a4d-4f1d-972a-5063406008ec",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ea1bec53-6477-4644-9172-c2b64be20b70",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f3487e4-a598-4d3b-a118-54ba2b3d4d14",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 8\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Ingredient 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1247905f-3352-46ad-9ce8-e53b25c85801",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9b1a2429-3e53-4990-8acb-1cd924af1753",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id2\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Flour\");\r",
							"    pm.expect(jsonData.quantity).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Flour\",\r\n    \"quantity\": 5\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all ingredients",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1f8c626b-c374-46b0-860e-f05a8cb9f660",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9327ab90-4b2a-47e1-a036-23470985aea9",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4bf8c91d-f1b6-4cce-9727-2f546f4e624f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0cf2c053-afb8-4e21-81f7-9b022795e959",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f692b8ca-0a42-4045-bf57-9c7c6f4d8199",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2b2fddd-8002-4b3e-9c7e-ae51a7c2e24a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b2d23a9-eff0-4d44-b209-f217fdc42ede",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42daa845-9adf-49b1-8431-2de813271908",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "92dc3133-65d2-4c60-ba3b-cfffed19af5c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "428b8956-131c-423c-b7fb-5b3b4d0dd59d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 12\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Wheat (only quantity)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "05955ca7-24c2-4e08-b080-e6178a7aad05",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f738b982-6365-42c7-9371-5bf241ba53e3",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 14\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Wheat name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "00ddd7b5-b50c-4e8f-bc39-c38eb43ffdb9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "220b959a-eb85-44b6-9aa6-5839287b8067",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Barley\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f1a37ad4-b5ad-4dd7-91f7-a994e645c55d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0301ff9a-fd35-45c2-97af-d29993691f9e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(15);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": \"15\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity and name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1adf8825-a832-4442-ac9c-11401a940652",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "115bb988-c321-4410-8d2c-c90cf5b12ef4",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Lettuce\");\r",
							"    pm.expect(jsonData.quantity).to.eql(30);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Lettuce\",\r\n    \"quantity\": \"30\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dffaf235-5023-4d9d-a180-7fe617018786",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e4e69666-9d61-479d-aab3-8798cc27959d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d5a7e68c-a34f-429a-902e-01726b7ab3ef",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "341a0ba8-da6c-4161-8080-2dcdadf5e160",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ec231a07-4789-4638-bace-20e82884056a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cd9a5c39-a858-4d26-bdd9-7ec03bf2f063",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f195fc70-7293-4c72-b469-7b69d4d67e36",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "520fa64b-3c78-4389-baf8-fcbaf4854dd9",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c3b8552-df89-4051-bc0a-427285bac273",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b8792dbe-0863-4f77-9615-4b35c2096fbd",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"rice_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 250\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Egg",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dcd82492-d56a-450b-89f4-a6746b13286c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa49fe24-50f5-4b82-804c-7f49c9bb57f2",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"eggs_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Eggs\");\r",
							"    pm.expect(jsonData.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eggs\",\r\n    \"quantity\": 2\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2599ab8-3e96-4778-a7b6-d33c738f2a50",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - Super  admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "379480bf-740e-472e-9e1f-5416e81eaaae",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"super-admin\",\r\n    \"password\": \"superAdmin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole  - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d40cef2-159a-4762-a150-2e18b9a734f9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21048e10-aec6-454a-bf87-bc919f215db4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"admin01\",\r\n    \"description\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a76922c4-0d5b-4bfa-97e0-2cf8b5b4c9fe",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c61a3ba6-ff2c-47b9-9bfe-29743025f5b8",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"user\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e2dfbcd4-9d9e-4a09-aef9-113b413e5bbf",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4ef4dfcf-b526-49dc-ba87-b313527c8f1e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(\"idrees\");\r",
							"    pm.expect(jsonData.email).to.eql('test@test.com');\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"idrees\",\r\n        \"lastName\": \"samadi\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"afg\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"admin\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4db1648d-ef8b-4d1b-b380-09b77f98451b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a086d13-7d89-4b73-9fd3-078d76157de0",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"usernameUser\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser\", \"password\");\r",
							"pm.environment.set(\"idUser\", jsonData._id);\r",
							"pm.environment.set(\"emailUser\", jsonData.email);\r",
							"//console.log(pm.environment.get(\"username\"))\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"emailUser\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"tom\",\r\n        \"lastName\": \"jack\"\r\n    },\r\n    \"username\": \"jacks89\",\r\n    \"email\": \"jack89@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a8d80ec6-6bee-4bbf-ae93-8ad685cfe387",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcd0c94e-24ce-4428-952c-fda5ae8560c0",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Username Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Germany\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fda95816-82db-424d-935b-95439a41093f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e92ac7a9-85e3-47a7-8c96-47b91dc3cd99",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Email Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5c55acfe-5b9c-47f1-bfe0-4fc7cd636e7e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b7c56bf0-234d-4dad-ae8b-2e51d6c661c2",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - status check\", function(){\r",
							"    pm.response.to.have.status(422);\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"invalid data\");\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"idrees@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "016c8156-4f72-48f5-b159-d0cf73e2e37b",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"\r",
							"pm.test(\"log in as a user - Wrong Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"someName\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22590ae9-5391-4cc9-95e3-3731a4ca13eb",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"console.log(jsonData)\r",
							"pm.test(\"log in as a user - Wrong Password - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"wrongPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86675f80-da32-470a-a933-07e28b1beca7",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenUser\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{usernameUser}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getInfo - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4baa875-173f-433b-99ef-ee9289f1271b",
						"exec": [
							"pm.test(\"getting a single user info by ID - getInfo\", ()=>{\r",
							"    pm.response.to.have.status(202);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - updateProfile - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5c45ae33-4726-4f50-9381-946847b319ed",
						"exec": [
							"pm.environment.set(\"updatedBio\", \"I Like cooking Indian foods\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "909d688d-4220-4848-9aac-0158c58a86f5",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"console.log(jsonData);\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.result.bio).to.equal(pm.environment.get(\"updatedBio\"))\r",
							"    pm.expect(jsonData.result.name.firstName).to.equal(\"someOne\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"someOne\"\r\n    },\r\n    \"bio\": \"{{updatedBio}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c1d376be-29af-4ff6-ad6b-098de0bc868e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "35589216-d094-42c1-8226-4351d14aab60",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user update Password\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password changed\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20cb893c-c0ad-4e4c-b69f-e5d21bd1cb7f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84d2f7d1-4540-4a9b-9e81-095740fb5e83",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.response.to.have.status(422)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password Too Short, Must be at Least 8 characters Long\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newP\",\r\n    \"confirmNewPassword\": \"newP\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteProfile - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b669ca78-1fcc-49d3-bfd5-cf8da7c6b888",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user deletes profile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"The User is Deleted\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "508648a7-f6bd-41e2-9bc2-4b26530d7820",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "isAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "598da014-917f-4506-802c-489ac9edb38e",
						"exec": [
							"pm.test(\"isAdmin\", ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/auth/{{idAdmin}}/role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"{{idAdmin}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc004994-3a13-4381-91d8-7130329b3c6f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3ba7774a-dc94-4605-b967-c3f86a1a4be7",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleId\", jsonData._id);\r",
							"pm.environment.set(\"roleId01\", jsonData._id);\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"zzzzzzzz\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0efa1cf8-5d46-4ddd-8eae-8ecc37638876",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin - sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d5993cc-ea77-495b-9b2e-0da57a7be412",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles?sort=-role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					],
					"query": [
						{
							"key": "sort",
							"value": "-role"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "668b5cca-8e85-433f-a4a5-482404e6bc82",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin fetch a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"admin fetch a role by type - json Check\", ()=>{\r",
							"    pm.expect(jsonData.role).to.eql(pm.environment.get(\"roleType\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId01}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId01}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editRole - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f40d7c57-f4f5-41b7-ae4e-75c4041d0834",
						"exec": [
							"const newRoleType = \"newRoleType\""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91a721c8-dbce-42ef-b94f-eb33bef72309",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"roleType\", jsonData.updatedRole.role)\r",
							"\r",
							"pm.test(\"admin edits a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"{{newRoleType}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33feb4b7-6fc1-4dba-9c66-c1ac6c46fc68",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"pm.test(\"admin deletes a role by type - json check\", ()=>{\r",
							"    pm.expect(jsonData.message).to.eql(\"The role does NOT Exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/5f806c1af5500119381de31c",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"5f806c1af5500119381de31c"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11e3be9f-aeda-4021-9a4d-4c15feb7a2c3",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin - pagenation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "19d3b959-5895-463d-8495-bb46c90be3f4",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(10));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0742d833-9461-4dbc-8917-4db5b7eab6d4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users?page=1&limit=5",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f23135fc-21df-40f2-9778-0ec059e42a14",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(6));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "878af330-baf7-4182-af64-ba2f1c7becc8",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "adfbd949-3d1e-444a-b4a3-810cc8c67ae9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c0888154-23a4-4966-a03a-dd5be8da3db8",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"usernameUser2\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser2\", \"password\");\r",
							"pm.environment.set(\"idUser2\", jsonData._id);\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser2\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random Text\",\r\n    \"name\": {\r\n        \"firstName\": \"jerry\",\r\n        \"lastName\": \"mouse\"\r\n    },\r\n    \"username\": \"theJerry\",\r\n    \"email\": \"jerry@mouse.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2191331b-0aa8-44b9-bca2-f15d3cb38576",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin edits user - status check\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"admin edits user - json check\", function(){\r",
							"    pm.expect(jsonData.updatedUser.roleType).to.eql(\"admin01\");\r",
							"   pm.expect(jsonData.updatedUser.bio).to.eql(\"some random text\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roleType\": \"admin01\",\r\n    \"bio\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79cb6266-c740-4da4-b973-01c6a744c84d",
						"exec": [
							"pm.test(\"admin deletes a user\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd8a9b2b-4ed2-4ce0-a8f9-20fd2e843393",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fd3e6d47-9a88-4474-b5b0-aa594c681987",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId = jsonData._id;\r",
							"pm.environment.set(\"recipe_id\", recipeId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\",\r\n    \"ingredients\": [{\r\n        \"name\": \"Rice\",\r\n        \"quantity\": 500,\r\n        \"unit\": \"grams\"\r\n    }]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88f95b8d-269c-430e-9bed-1f7b58430581",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1062aa0e-7138-4a19-81fe-f3e41dd00127",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId2 = jsonData._id;\r",
							"pm.environment.set(\"recipe_id2\", recipeId2);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alternate Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and add freshly cracked eggs in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alternate Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\"],\r\n    \"cookingProcess\":[\"stir the rice and add freshly cracked eggs in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\"    \r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all recipes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae741e0a-635b-4514-b456-367e1c7f5584",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ff103967-9482-4e27-8a4e-43b1eb50bc91",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe Fried Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "506e25c0-eb1b-4f63-bd57-c95c32944775",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fac0ac31-bbf8-4ee6-b5c8-b8b61f1e149f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d523eda3-926a-4ca7-a640-695526ec51ff",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7996cbe7-d64a-491b-9ac6-c664a61855cc",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "23ae8cc3-03d4-4f76-a4d5-c4bc4a5947f1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dc278f6c-0240-4709-9db1-b45349cb878d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ea94f76f-eebf-4008-8ca1-55c3c7c97258",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0dee7c80-f392-40aa-bcd4-7b542ff3e61b",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\",  \"let it cool for 5 minutes\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"imgur.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"let it cool for 5 minutes\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"imgur.com\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca82edd4-04c9-43ba-8aa4-bdb29cb428c5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c1124a18-9a16-4327-8d01-d4553cc11c08",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice Supreme\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice Supreme\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Vegetarian\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2bf21e43-69d7-4241-b967-7130fbbd81b9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b465372a-721b-4d77-8f59-f05bd503972e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af7a2606-5094-4938-9464-8bfbb05844b7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ec734931-8377-4200-8a31-1ef21882f119",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1b64c37-5ce2-41e3-a206-a5ebe580510c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "79dd85a4-c9d9-4da9-a7ae-7c4188164488",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3f010ea6-e7a6-4676-83aa-ec00822d275b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "035a3740-7de6-45ee-b6f2-791bb5dbaab4",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin -  admin 02",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a81e298-8189-40be-bd68-242ee19ab492",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"super-admin\",\r\n    \"password\": \"superAdmin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9027ed8-2846-4370-ae93-76ffb6633c99",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/recipe/{{recipe_id}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"{{recipe_id}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a4e13af-89c3-4f6f-88fe-418b283ee9d1",
						"exec": [
							"pm.test(\"get Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipe/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllcomments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4cc0141-61c1-48af-aead-a64483603d07",
						"exec": [
							"pm.test(\"get All comments\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipe/{{recipe_id}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"{{recipe_id}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ee50b0d-038e-4a4a-a14b-5ea899c99d79",
						"exec": [
							"pm.test(\"delete Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipe/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78e6c7f4-8a1a-4cac-85e8-0e68a2ae8906",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/recipe/{{recipe_id}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"{{recipe_id}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "addSubComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23d2e4e8-b1f3-4202-b15c-2eb15fec6a5e",
						"exec": [
							"pm.test(\"add Sub Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Idrees et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/recipe/subcomments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipe",
						"subcomments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "56714e72-6fc3-4a06-a97b-a635d8173b6c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b841b864-d09a-4cd5-b5ae-9ab164feb709",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6ca8dfa4-13cb-49dd-8684-ad5f39cf9fe6",
			"key": "host",
			"value": "{{host}}"
		}
	],
	"protocolProfileBehavior": {}
}