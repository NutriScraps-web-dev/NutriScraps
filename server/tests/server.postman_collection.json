{
  "info": {
    "_postman_id": "e4960c89-7dd8-4ab2-b418-344c853b4dfa",
    "name": "server",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
		{
			"name": "Create Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c6b7c55-8fa7-48ba-8bdb-e7848e0c7929",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f3281a0-d690-4962-a1d0-def731d47ef8",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 8\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Ingredient 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "52e9b20a-39ae-4a99-86dd-28e31efda09f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ae4eec61-bdbe-4af2-8605-10f2011170ef",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id2\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Flour\");\r",
							"    pm.expect(jsonData.quantity).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Flour\",\r\n    \"quantity\": 5\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all ingredients",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b48aeb06-35a7-43b6-9584-2f7a5295078d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc307216-7c53-48da-bbec-a2482f434f61",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2951fc8a-b104-4db8-8414-22afc2ddb381",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a875501-5eba-4f91-a3d7-666c5bf617bb",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e71203c7-df52-411b-a035-335b84e79690",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d0a75001-203a-4163-80df-abf18d18d2c4",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1d7caf3c-cf01-443f-acec-73627832aaf4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "894f7b9e-6214-408b-ba23-c5346f9c6f63",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "deeffba3-daea-44bf-abc2-d753d0ece6cd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f066187-1cd2-43db-87e5-7dcbd59c9a4a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 12\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Wheat (only quantity)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "954f3d9c-af40-41a1-9f4a-ce1130ca19f6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a524657-4a04-45d4-81c4-d68636a29fc5",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 14\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Wheat name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "adb63cb7-1b6f-4979-aa21-982250bfb6e5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3fc5473-7a5d-42bc-a35d-c2d42424b7ce",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Barley\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8a68dde1-c9e5-45f3-860b-37fcb4a21f17",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5899da61-9622-4c9d-bb5b-f95e32cbdf3a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(15);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": \"15\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity and name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b98ff62-f2c6-4353-a40d-0580cac0e6a7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c6076689-8ec5-4e14-b690-7aa0b32977f3",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Lettuce\");\r",
							"    pm.expect(jsonData.quantity).to.eql(30);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Lettuce\",\r\n    \"quantity\": \"30\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "57b75cba-8bee-4647-bca1-0e8e90710b87",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "704cc6f5-9f59-4755-84a2-7698bcc744c1",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a3a1ef9f-2523-40bd-903b-a26d72bc3af1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a0e2a03e-fe10-4d1d-8172-f88c4ab635ce",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "426373ab-0d02-4e74-985f-f562d2edb41c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba1ed000-fdb2-41e5-9584-bc5491a5527f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d735383-d31c-4039-9524-0ecef396513b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "15148781-ee13-4ee8-8172-ba3bfe4d3d85",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b2507e8a-e9b6-4bbf-8970-b7aa834ce863",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0e9875b7-81f9-4539-bbb1-d0a4055fba85",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"rice_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 250\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Egg",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fcf029b7-be29-4a5c-affd-f507aaada20b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fea710e6-92fa-43fe-b8ab-d7e88f51608f",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"eggs_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Eggs\");\r",
							"    pm.expect(jsonData.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eggs\",\r\n    \"quantity\": 2\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8e3a9ba1-c036-4ab4-9b29-bdd0db19a1ea",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c5a802d4-dd48-42e8-a423-f789b6d47d69",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId = jsonData._id;\r",
							"pm.environment.set(\"recipe_id\", recipeId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f297595d-4a67-4794-9129-38a36920d3e4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f1544d97-8469-470e-aeba-169f0cab87e6",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId2 = jsonData._id;\r",
							"pm.environment.set(\"recipe_id2\", recipeId2);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alternate Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and add freshly cracked eggs in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alternate Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\"],\r\n    \"cookingProcess\":[\"stir the rice and add freshly cracked eggs in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all recipes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0233f14f-2ac9-4c95-824a-a8a625afa560",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c5a9b98a-0d35-464b-865c-2f5eb1aa0668",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe Fried Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6861034-6e4a-43ed-b9d6-3a651941811d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83cc705e-26e3-4b8b-82ea-58ec70dc3326",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8896e841-e9f2-4d6f-85a5-2a24a4856925",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d33ea58b-661f-47ec-8672-67fa32678d9f",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8bf56a97-b7ac-402f-9061-3e2635090d24",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cdeb786e-68e9-478a-aa1f-d93917e06441",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ab32f8b-a473-4490-899f-9e88e29f279a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "69756248-e26d-4ae5-aeef-6e1a3655ff70",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\",  \"let it cool for 5 minutes\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"let it cool for 5 minutes\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7c5bc04f-28c6-4bfb-93fc-6760fda5c9d7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8956c490-6fd2-40c0-9956-8e420b21d970",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice Supreme\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice Supreme\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Vegetarian\",\r\n    \"ingredients\" : [\"{{rice_id}}\", \"{{eggs_id}}\"]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "40f25ca3-f675-4210-8878-59c1a3aa1e49",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fd2a99ea-a418-40ae-ae20-94b2e985a72d",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2e89f42e-007c-4bc4-9a19-cc6b850def42",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7171d5c0-ae8c-4b05-bb6a-a177ab9110f8",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "98f0d416-5b0e-40d8-988b-512d8b01725e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4904913a-955a-4eb9-9d67-55b508cd518e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "00966ade-8c74-43fc-a682-1eeb953a78e7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "105a612e-21e8-493e-9953-5b8587004f59",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "70c122f0-342c-4296-bd7c-eaf624f7e5bd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - Super  admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b868ec4b-8490-455a-b532-09e88c935cfd",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"super-admin\",\r\n    \"password\": \"superAdmin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole  - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5506b04-bd25-4646-a900-2cd4795628cd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa507498-e742-4623-9741-0fa9ef61d162",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"admin01\",\r\n    \"description\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "52c66f33-8915-4284-991b-d605a98897a6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "89568735-6a1e-466c-bf74-8f77b1d62369",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"user\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ed10ea50-9455-4044-baa2-6d1d8c3eac45",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2578c5e6-dfbe-4cef-a1be-358ef8065b33",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(\"idrees\");\r",
							"    pm.expect(jsonData.email).to.eql('test@test.com');\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"idrees\",\r\n        \"lastName\": \"samadi\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"afg\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"admin\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "149c8ab2-3c9e-493f-826d-f194102f7484",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee6b7fda-a3ce-430d-a65d-4113664d1f2e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"usernameUser\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser\", \"password\");\r",
							"pm.environment.set(\"idUser\", jsonData._id);\r",
							"pm.environment.set(\"emailUser\", jsonData.email);\r",
							"//console.log(pm.environment.get(\"username\"))\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"emailUser\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"tom\",\r\n        \"lastName\": \"jack\"\r\n    },\r\n    \"username\": \"jacks11\",\r\n    \"email\": \"jack@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ddcf6a02-e2ab-49fb-b272-74502a534f82",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "569fb995-66e3-4486-8016-361d828ad8cf",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Username Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Germany\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4a48c61c-e093-43a5-b53d-e05b560523e1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7aa9c60e-4bd4-45ea-84b0-1a988565ce4f",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Email Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ded36d7-7dc8-416a-8913-708541ea463f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f6c3cdd-bfdd-458e-8244-3883fb0fd55c",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - status check\", function(){\r",
							"    pm.response.to.have.status(422);\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"invalid data\");\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"idrees@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36254d77-cd27-420c-aa88-aa4d41c922d1",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"\r",
							"pm.test(\"log in as a user - Wrong Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"someName\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0374ed3-b904-406c-adf1-718808348947",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"console.log(jsonData)\r",
							"pm.test(\"log in as a user - Wrong Password - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"wrongPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "030f0a6a-3986-4886-a892-8b6cfa51f453",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenUser\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{usernameUser}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getInfo - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df57ebb5-7dd8-4c14-a7d2-6ad7109a2b20",
						"exec": [
							"pm.test(\"getting a single user info by ID - getInfo\", ()=>{\r",
							"    pm.response.to.have.status(202);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - updateProfile - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "809d3add-ddc1-46fa-8e68-72fca4113b79",
						"exec": [
							"pm.environment.set(\"updatedBio\", \"I Like cooking Indian foods\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eb4851ff-6361-4b25-b39b-fadffda0e44e",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"console.log(jsonData);\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.result.bio).to.equal(pm.environment.get(\"updatedBio\"))\r",
							"    pm.expect(jsonData.result.name.firstName).to.equal(\"someOne\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"someOne\"\r\n    },\r\n    \"bio\": \"{{updatedBio}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8b8d72a8-7bed-4dd8-b987-51df412a05d4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0cee1c55-04c2-4258-a04a-8851624c12d4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user update Password\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password changed\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f80642b4-5852-45e0-866a-00b878d43d45",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77ce5b10-3912-4724-9ddd-899e750f6e19",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.response.to.have.status(422)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password Too Short, Must be at Least 8 characters Long\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newP\",\r\n    \"confirmNewPassword\": \"newP\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteProfile - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c137662-2092-4f86-9f12-1bfce9a0ecda",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user deletes profile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"The User is Deleted\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4a28c48-7a16-43b5-b9fe-326d17176e11",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "isAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8658e2e-f4a0-4c66-9947-a34942cd1a7c",
						"exec": [
							"pm.test(\"isAdmin\", ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/auth/{{idAdmin}}/role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"{{idAdmin}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6718c06b-4bd2-4a14-bf3c-a9ebd3cc421a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e66d28bb-dab9-4889-a414-29458348a018",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleId\", jsonData._id);\r",
							"pm.environment.set(\"roleId01\", jsonData._id);\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"zzzzzzzz\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c97ab993-dad8-460b-bb14-b5778e3e8754",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin - sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52260daf-392d-452f-ae39-29e8deed08d7",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles?sort=-role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					],
					"query": [
						{
							"key": "sort",
							"value": "-role"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f81e42de-51b2-4763-94dc-af59ae2a531d",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin fetch a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"admin fetch a role by type - json Check\", ()=>{\r",
							"    pm.expect(jsonData.role).to.eql(pm.environment.get(\"roleType\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId01}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId01}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editRole - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9f68ead2-039c-4987-bb85-e9d25dde7eb7",
						"exec": [
							"const newRoleType = \"newRoleType\""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "da88e4a0-c6e2-4033-841c-e38d0e114105",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"roleType\", jsonData.updatedRole.role)\r",
							"\r",
							"pm.test(\"admin edits a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"{{newRoleType}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d82af431-185c-447b-8a8c-90ab21bfc207",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"pm.test(\"admin deletes a role by type - json check\", ()=>{\r",
							"    pm.expect(jsonData.message).to.eql(\"The role does NOT Exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/5f806c1af5500119381de31c",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"5f806c1af5500119381de31c"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7eb04b24-c679-4eea-9ecf-9a7bb34578c6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin - pagenation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9202e79e-f864-4905-94d7-0e42c31f64a8",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(10));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a3d6005a-1781-4f97-af09-49bf83155fe2",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users?page=1&limit=5",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5e373c7-38ab-490b-89ad-d4789b7cecd8",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(6));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "391aca79-6c74-4473-8613-5e593e9c90d4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b9d34112-7e02-4d29-a9f4-20937479b19c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5dd6706d-78d5-47ed-9654-d3c9f26ed934",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"usernameUser2\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser2\", \"password\");\r",
							"pm.environment.set(\"idUser2\", jsonData._id);\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser2\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random Text\",\r\n    \"name\": {\r\n        \"firstName\": \"jerry\",\r\n        \"lastName\": \"mouse\"\r\n    },\r\n    \"username\": \"theJerry\",\r\n    \"email\": \"jerry@mouse.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5db048a9-0961-451b-8e94-f0abed261200",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin edits user - status check\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"admin edits user - json check\", function(){\r",
							"    pm.expect(jsonData.updatedUser.roleType).to.eql(\"admin01\");\r",
							"   pm.expect(jsonData.updatedUser.bio).to.eql(\"some random text\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roleType\": \"admin01\",\r\n    \"bio\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf79acb5-54a0-44cd-b959-15b44c7d54e2",
						"exec": [
							"pm.test(\"admin deletes a user\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88be8e27-5f9e-4ba8-9b5d-2613e73efd37",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf730285-4572-4520-9fb6-3d305889bfb4",
						"exec": [
							"pm.test(\"get Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllcomments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb48f981-cb77-4993-ace3-f4230f0f6691",
						"exec": [
							"pm.test(\"get All comments\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d686ee3b-8f6b-4136-ad5d-969cddb5f3fb",
						"exec": [
							"pm.test(\"delete Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "868016f9-a6b6-44dd-bdbb-7405726aae8f",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "addSubComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98eca26a-072d-4728-ac46-c644111fb8e7",
						"exec": [
							"pm.test(\"add Sub Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Idrees et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		}
	],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "ee39ef98-7e40-4c9a-9727-c10b3f2d609a",
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "4eb81008-6f74-41fe-95c4-ee5e2a651ace",
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "id": "cd185905-a834-4211-8030-583d17702534",
      "key": "host",
      "value": "{{host}}",
      "type": "string"
    }
  ],
  "protocolProfileBehavior": {}
}
