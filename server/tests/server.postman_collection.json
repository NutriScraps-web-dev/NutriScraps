{
	"info": {
		"_postman_id": "d8c7f4b0-625a-4345-9aae-27435f73aed5",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc5afd2d-e229-4046-83e3-8334ac477ea1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f9335a3-2d5b-45fe-aeb9-728cd4ec9ba0",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 8\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Ingredient 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b5c29548-ec99-4b64-a405-cf39181c4843",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71707b33-dbd4-4e72-9cfe-8fda25864149",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"ingredient_id2\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Flour\");\r",
							"    pm.expect(jsonData.quantity).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Flour\",\r\n    \"quantity\": 5\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all ingredients",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae07d1bd-6fc6-4871-9713-03e97b5e8ddf",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1a819b22-8bf1-4c2f-a627-91350e57b6fa",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "573b2a89-d6fa-4602-8686-688fe5600a86",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58bb1670-8297-4c51-86c8-9bf4bbba77e1",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(8);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b45f401d-3584-475f-b02f-0be58c463746",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "570baa80-12e9-4943-9f5d-d3a2a05de0ef",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "733f0e13-8ab2-41da-b811-c8c81fb534ec",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "15985cd7-8e39-458e-825f-d7554c258358",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9170a82-1a52-4c69-8ab9-4521a082d02a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2cea88d1-a6b6-4b06-b660-424461bea9e7",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(12);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 12\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Ingredient Wheat (only quantity)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c6b19193-d6c3-4e2e-856e-9a93f9cb4bad",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7e9d1b66-4a18-40ff-858b-681e2c7e661c",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Wheat\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Wheat\",\r\n    \"quantity\": 14\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Wheat name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4aafda28-3130-452c-8f7c-ab3d09baaf4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2ea6166e-fa82-478f-8459-1753905d8265",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(14);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Barley\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd8f6be1-e4df-407b-bbce-7bc2f879ecd4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ac6f421b-1922-4a46-9856-7375fbb339aa",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Barley\");\r",
							"    pm.expect(jsonData.quantity).to.eql(15);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": \"15\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ingredient Barley quantity and name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1972cfb0-ddf6-47c2-8756-2b3fdcd91932",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2583f45b-1c98-48a9-a44f-bf9e685d651e",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Lettuce\");\r",
							"    pm.expect(jsonData.quantity).to.eql(30);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Lettuce\",\r\n    \"quantity\": \"30\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "69d49e4e-52fc-4470-a81c-94d82522f420",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5988acd4-388f-4db4-966a-46451f50c127",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existent Ingredient",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "86c28ba1-5b2a-44ab-b70e-f68010310f94",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9e5f9b65-d572-4eb1-8799-8b9fe75ba480",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/5f632813e057f92e4cae877f",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"5f632813e057f92e4cae877f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "09902f8a-69b8-478d-bb97-096d6eb47e55",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e055b142-a7ae-4d34-b9ce-bddee9c06bb9",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ingredient Flour",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f6ed9f36-3874-4c9e-882f-8d55e2a5cfde",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8d8da00-f687-453c-9c83-132b46834261",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct ingredient response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Ingredient not found!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/ingredients/{{ingredient_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients",
						"{{ingredient_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6de0a68-4370-457a-9ddb-b233dfcd5029",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8798ece5-fc24-46fc-8bbf-6505862bd25b",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"rice_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Rice\");\r",
							"    pm.expect(jsonData.quantity).to.eql(250);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Rice\",\r\n    \"quantity\": 250\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Egg",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "32690483-27ec-48ea-b0c0-5825a2e2cee7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "837e422a-4f96-4182-b99d-a8cf89517472",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var ingredientId = jsonData._id;\r",
							"pm.environment.set(\"eggs_id\", ingredientId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(201);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Eggs\");\r",
							"    pm.expect(jsonData.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eggs\",\r\n    \"quantity\": 2\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/ingredients",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "493756af-3b27-4c0b-b21d-20df3a5c558a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - Super  admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "742ee719-aae4-4c0f-a2a7-d0fa9ee878dd",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"super-admin\",\r\n    \"password\": \"superAdmin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole  - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e4ef9fb7-7800-4684-bd8a-c322979fcdb8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4a322924-6116-44c7-b858-04a01c546b2c",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"admin01\",\r\n    \"description\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0945621a-9ee1-47f0-90bf-5fa5f81cbe35",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f7ed9a3e-2a02-4f04-86b7-a601e233ded8",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"user\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "efbcccc1-541a-48de-98d0-3500843cf82d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f76a57ff-139e-4972-91ab-d6d32428d32a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(\"idrees\");\r",
							"    pm.expect(jsonData.email).to.eql('test@test.com');\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"idrees\",\r\n        \"lastName\": \"samadi\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"afg\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"admin\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "13d86339-90d9-475e-84d8-79530b56fecf",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6ce79396-492e-4e51-93a8-42a6abb7448a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"usernameUser\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser\", \"password\");\r",
							"pm.environment.set(\"idUser\", jsonData._id);\r",
							"pm.environment.set(\"emailUser\", jsonData.email);\r",
							"//console.log(pm.environment.get(\"username\"))\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"emailUser\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random text\",\r\n    \"name\": {\r\n        \"firstName\": \"tom\",\r\n        \"lastName\": \"jack\"\r\n    },\r\n    \"username\": \"jacks11\",\r\n    \"email\": \"jack@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "89ee90c5-a168-4374-b497-420f9d377577",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "81e983d4-66d2-4621-80ef-47b175ddcf3b",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - existing Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Username Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"idrees\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Germany\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c545187b-73c4-466b-b85b-e2dc721cddc9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4f07ce4c-5bc1-4052-92cb-89849305033a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - status check\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - email exist - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"Email Already Exist\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user - error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2cbaa3ef-cc91-414e-9372-55f2c5b351c7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7909c7d4-5a1b-40b9-ae08-cb1057794da6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - status check\", function(){\r",
							"    pm.response.to.have.status(422);\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - invalid data - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"invalid data\");\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\",\r\n    \"name\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n    },\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"idrees@test.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b75fcc3-6edb-4a07-a48e-2b598c9888a4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"\r",
							"pm.test(\"log in as a user - Wrong Username - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"someName\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15157027-6640-4c58-a80a-e5b336c0fc04",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(401)\r",
							"})\r",
							"console.log(jsonData)\r",
							"pm.test(\"log in as a user - Wrong Password - json check\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username or Password\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"wrongPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "77631e27-8d8a-4114-8dfc-1dda2345419a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenUser\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{usernameUser}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getInfo - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "652d7916-e78e-44b1-bf17-91aa2322eacb",
						"exec": [
							"pm.test(\"getting a single user info by ID - getInfo\", ()=>{\r",
							"    pm.response.to.have.status(202);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - updateProfile - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "620e7159-6985-4936-9d0b-b05bc53e164f",
						"exec": [
							"pm.environment.set(\"updatedBio\", \"I Like cooking Indian foods\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c67b6e4f-09fd-4631-aa5e-cb464136a8e0",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"console.log(jsonData);\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.result.bio).to.equal(pm.environment.get(\"updatedBio\"))\r",
							"    pm.expect(jsonData.result.name.firstName).to.equal(\"someOne\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":{\r\n        \"firstName\": \"someOne\"\r\n    },\r\n    \"bio\": \"{{updatedBio}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7a85b46-b483-4a68-b461-c4d4688b7395",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b577cbd7-641f-4cad-9d03-420a0749a999",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user update Password\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password changed\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newPassword\",\r\n    \"confirmNewPassword\": \"newPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - changePassword - user error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "514f0c34-811d-4eb0-b74f-b39dc55ab408",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "df318883-5100-4e4f-9987-c730dcb3e19a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.response.to.have.status(422)\r",
							"})\r",
							"pm.test(\"user updates Password\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"Password Too Short, Must be at Least 8 characters Long\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenUser}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{passwordUser}}\",\r\n    \"newPassword\": \"newP\",\r\n    \"confirmNewPassword\": \"newP\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteProfile - user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0a05e03-a1e2-47d4-b44e-db0291db43f6",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user deletes profile\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"user updates profile - updateProfile\", ()=>{\r",
							"    pm.expect(jsonData.message).to.equal(\"The User is Deleted\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenUser}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/{{idUser}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postLogin - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e14f2494-41a1-4fce-afbb-b424efb85532",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"user log in\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"tokenAdmin\", jsonData.token);\r",
							"pm.environment.set(\"idAdmin\", jsonData.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"idrees\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "isAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f427265f-9ee5-48a8-9dc8-997e6b76c8e4",
						"exec": [
							"pm.test(\"isAdmin\", ()=> {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/auth/{{idAdmin}}/role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"{{idAdmin}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - createRole - admin ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6a35c28b-5eea-4c26-9737-020041c1f350",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a9297341-c69f-44fa-8558-1b25c93852d9",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin creates new role\", ()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"roleId\", jsonData._id);\r",
							"pm.environment.set(\"roleId01\", jsonData._id);\r",
							"pm.environment.set(\"roleType\", jsonData.role);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\" : \"zzzzzzzz\",\r\n    \"description\": \"some random text\",\r\n    \"users\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d585c792-8be2-4ece-b981-de2f9116850d",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllRoles - admin - sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bdd0f00-0e2b-4668-b6ce-f443a204fb8b",
						"exec": [
							"pm.test(\"admin fetch all roles\", ()=>{\r",
							"    pm.response.to.have.status(202)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{tokenAdmin}}"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles?sort=-role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles"
					],
					"query": [
						{
							"key": "sort",
							"value": "-role"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bbc28da-f3c6-4c1d-b427-63d220de7187",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin fetch a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"admin fetch a role by type - json Check\", ()=>{\r",
							"    pm.expect(jsonData.role).to.eql(pm.environment.get(\"roleType\"))\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId01}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId01}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editRole - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fbe25976-10cf-4ecc-85dd-7db4fda76e18",
						"exec": [
							"const newRoleType = \"newRoleType\""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3b1afece-ecd8-4bac-ba7c-b2dec68cf981",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"roleType\", jsonData.updatedRole.role)\r",
							"\r",
							"pm.test(\"admin edits a role by type - status check\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"{{newRoleType}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin - error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2fe9e6d-7730-4ba3-9d14-7fd56785a457",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"pm.test(\"admin deletes a role by type - json check\", ()=>{\r",
							"    pm.expect(jsonData.message).to.eql(\"The role does NOT Exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/5f806c1af5500119381de31c",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"5f806c1af5500119381de31c"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteRole - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3deb0934-8df1-4000-8a7d-996313dadb36",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin deletes a role by type\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/roles/{{roleId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"roles",
						"{{roleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin - pagenation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "95ccc0d2-04ed-429f-8525-996dfe4879a0",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(10));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7175acfe-81f3-4abc-bd29-c0fe033645f4",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users?page=1&limit=5",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get - getAllUsers - admin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eca75565-aa48-4415-a8f0-af706f93e016",
						"exec": [
							"let perPage = Math.floor(Math.random() * Math.floor(6));\r",
							"\r",
							"pm.environment.set(\"perPage\", perPage);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2bb814d0-8cf9-4999-b285-a94de8628919",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin Fetches all users - status\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/admins/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "post - postSignup - user 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9efcf35e-05d4-44d1-a727-c48750140c5b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7b76c8c2-4e07-4c93-aead-8a7d73aeacdd",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"usernameUser2\", jsonData.username);\r",
							"pm.environment.set(\"passwordUser2\", \"password\");\r",
							"pm.environment.set(\"idUser2\", jsonData._id);\r",
							"\r",
							"pm.test(\"sign up as a user - status check\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"sign up as a user - json check\", function(){\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"usernameUser2\"));\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"bio\": \"some random Text\",\r\n    \"name\": {\r\n        \"firstName\": \"jerry\",\r\n        \"lastName\": \"mouse\"\r\n    },\r\n    \"username\": \"theJerry\",\r\n    \"email\": \"jerry@mouse.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"usa\",\r\n    \"confirmPassword\": \"password\",\r\n    \"roleType\" : \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch - editUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a13c5f5-653c-4e4b-b3f5-d2293e9d4561",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"admin edits user - status check\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"admin edits user - json check\", function(){\r",
							"    pm.expect(jsonData.updatedUser.roleType).to.eql(\"admin01\");\r",
							"   pm.expect(jsonData.updatedUser.bio).to.eql(\"some random text\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"roleType\": \"admin01\",\r\n    \"bio\": \"some random text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete - deleteUser - admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31c3a5e9-dfed-4280-91e9-8e2bcdf4ad0b",
						"exec": [
							"pm.test(\"admin deletes a user\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admins/users/{{idUser2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admins",
						"users",
						"{{idUser2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2adff46a-81e3-4c20-96b5-4eab45b44f11",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0750e34-bb1c-4893-ac4a-418369112311",
						"exec": [
							"pm.test(\"get Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllcomments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5a712e7-44c4-488f-82fd-e9fcb55bdd97",
						"exec": [
							"pm.test(\"get All comments\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a1092c3-012b-46f2-b3fe-7727ab6372ef",
						"exec": [
							"pm.test(\"delete Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1c092ce-bfa0-44ad-9fda-e9d659169e1a",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"create Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"commentId\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "addSubComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e87c8de1-c97a-42a4-9fb3-986ec8b20eb2",
						"exec": [
							"pm.test(\"add Sub Comment\", ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Idrees et, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliqui\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/comments/{{commentId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eccfc5eb-214a-4bd9-824b-6e654f591354",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c8816d9-cbcd-47fa-9162-cb524e4c6100",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId = jsonData._id;\r",
							"pm.environment.set(\"recipe_id\", recipeId);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\",\r\n    \"ingredients\": [{\r\n        \"name\": \"Rice\",\r\n        \"quantity\": 500,\r\n        \"unit\": \"grams\"\r\n    }]\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "31957071-5ca3-4db5-b26a-35038a0a235c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ebe0ffe7-499f-4a7f-a5fd-3cc74f3e675f",
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var recipeId2 = jsonData._id;\r",
							"pm.environment.set(\"recipe_id2\", recipeId2);\r",
							"\r",
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Alternate Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and add freshly cracked eggs in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alternate Fried Rice\",\r\n    \"cuisine\": \"International\",\r\n    \"preparation\":[\"soak rice in water\"],\r\n    \"cookingProcess\":[\"stir the rice and add freshly cracked eggs in the frying pan\"],\r\n    \"toServe\": [\"serve with a drink\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"google.com\"    \r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all recipes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9eac2dc5-7806-492a-92f7-1fc3eda5bb84",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9dd68475-92ee-4b16-abdc-d718e91741a6",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe Fried Rice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b8762199-6c93-4ab9-bc05-12472d487a4d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6a438454-6002-43ea-812f-c56c02c8be57",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"International\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"google.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a850f687-37c6-498a-8134-157f7b0f0cba",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3c498ca-b698-4e71-bf0c-c90c4a6ea14c",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bae0c962-486f-46e3-bdb8-2c0bdea5c162",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0e7e1968-ca79-4586-95fb-48d499d9ddd6",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "47cf5850-27a9-4bf5-b0aa-940a53845a3f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "de2640c7-8cc9-490b-a839-2f55865ae2dc",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\",  \"let it cool for 5 minutes\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Non-Vegetarian\");\r",
							"    pm.expect(jsonData.image).to.eql(\"imgur.com\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"let it cool for 5 minutes\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Non-Vegetarian\",\r\n    \"image\": \"imgur.com\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Fried Rice Recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6b21a968-0ecb-4907-8969-35aed5dd9272",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3dc21ef8-5ae8-4fed-9858-590878fb3636",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Fried Rice Supreme\");\r",
							"    pm.expect(jsonData.cuisine).to.eql(\"Japanese\");\r",
							"    pm.expect(jsonData.preparation).to.eql([\"soak rice in water\", \"beat eggs in a bowl\"]);\r",
							"    pm.expect(jsonData.cookingProcess).to.eql([\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"]);\r",
							"    pm.expect(jsonData.toServe).to.eql([\"serve with a drink\", \"serve with sauce\"]);\r",
							"    pm.expect(jsonData.type).to.eql(\"Vegetarian\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fried Rice Supreme\",\r\n    \"cuisine\": \"Japanese\",\r\n    \"preparation\":[\"soak rice in water\", \"beat eggs in a bowl\"],\r\n    \"cookingProcess\":[\"stir the rice and egg batter in the frying pan\", \"add spices while stirring\", \"leave it in pan for 5 minutes without heat\"],\r\n    \"toServe\": [\"serve with a drink\", \"serve with sauce\"],\r\n    \"type\": \"Vegetarian\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ce852e99-8e26-4df4-82a0-bafca5106465",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b0d5602-cb3d-4560-8eda-3a7812db161a",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete non-existing recipe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fc6f79ea-47e9-430d-a257-026c2d785e7e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "587a9b5b-9d06-4aa7-b3f7-08908602eabd",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/5f63a1b67edd7626d83d4088",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"5f63a1b67edd7626d83d4088"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f6e29f8-8490-42d7-bc14-22a087cbede7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1a0a58d8-25a8-4ed5-8f58-1fb6e46078c4",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{tokenAdmin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "60f5d50d-e58b-45a0-9f71-9921c94245c2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f350a1b0-3be5-46be-8883-3da4e6736be5",
						"exec": [
							"pm.test(\"Correct status code\",\r",
							"    function(){\r",
							"    pm.response.to.have.status(404);  \r",
							"});\r",
							"\r",
							"pm.test(\"Correct recipe response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Recipe not found!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/api/recipes/{{recipe_id2}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"recipes",
						"{{recipe_id2}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d7681c8d-945f-42e0-b566-c590db3776f0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dbb24cce-8a67-4137-9ea5-b655ed6708ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6ca8dfa4-13cb-49dd-8684-ad5f39cf9fe6",
			"key": "host",
			"value": "{{host}}"
		}
	],
	"protocolProfileBehavior": {}
}